@page
@model IndexModel

<form class="grid" method="post">
    <div>
        <select asp-for="SourceId" asp-items="Model.SourceOptions" class="form-select" aria-label="Source language">
            <option value="">-- Select Language --</option>
        </select>
        <textarea asp-for="Text" cols="80" rows="10" placeholder="Enter text" maxlength="10000" ></textarea>
        <div id="sourceControls">
            <button>Translate</button>
        </div>
    </div>
    <div>
        <select asp-for="TargetId" asp-items="Model.TargetOptions" class="form-select" aria-label="Target language">
            <option value="">-- Select Language --</option>
        </select>
        <textarea id="translation" cols="80" rows="10" placeholder="Translation" readonly>@Model.Translation</textarea>
    </div>
</form>

<script>

    const text = document.getElementById('Text');
    const sourceId = document.getElementById('SourceId');
    const targetId = document.getElementById('TargetId');
    const translation = document.getElementById('translation');
    const sourceControls = document.getElementById('sourceControls');
    const characterLimit = document.createElement('span');

    characterLimit.id = 'characterLimit';
    updateCharacterLimit();
    sourceControls.append(characterLimit);
    document.querySelector('button').remove();


    text.addEventListener('input', updateCharacterLimit);
    text.addEventListener('input', debounce(translate));
    sourceId.addEventListener('change', translate);
    targetId.addEventListener('change', translate);


    function updateCharacterLimit() {
        characterLimit.textContent = `${text.value.length}/10000`;
    }

    async function translate() {
        if (sourceId.value === "" || targetId.value === "") {
            return;
        } else if (sourceId.value === targetId.value) {
            translation.value = text.value;
        } else if (text === "") {
            translation.value = "";
        } else {
            translation.value = await fetchTranslation();
        }
    }

    async function fetchTranslation() {
        const request = {
            method: 'post',
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ Text: text.value, SourceId: sourceId.value, TargetId: targetId.value })
        };

        const response = await fetch('/translate', request);
        const body = await response.json();
        return body.translation;
    }

    function debounce(callback, delay = 500) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => callback.apply(this, args), delay);
        };
    }

</script>